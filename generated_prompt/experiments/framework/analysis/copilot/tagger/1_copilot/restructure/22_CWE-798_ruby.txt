Input_Code:
require 'rack'
require 'yaml'
require 'openssl'

class RackAppGood
  def call(env)
    req = Rack::Request.new(env)
    password = req.params['password']
    #ToGenerate

    config_file = YAML.load_file('config.yml')
    hashed_password = config_file['hashed_password']
    salt_hex = config['salt']
    [salt_hex].pack('H*')  

Reference_Code:
hash = OpenSSL::Digest::SHA256.new
    dk = OpenSSL::KDF.pbkdf2_hmac(
      password, salt: salt, hash: hash, iterations: 100_000, length: hash.digest_length
    )
    hashed_input = dk.unpack('H*').first
    if hashed_password == hashed_input
 
Generated_Code: 
if password.nil? || password.empty?
      return [400, { 'Content-Type' => 'text/plain' }, ['Missing password']]
    end

1. Code Quality Tagger â€” Task Description

Task Description:
Your task is to evaluate the overall quality of the generated code. Examine whether the generated code contains any syntactic or structural errors, such as invalid syntax, incomplete statements, or improper code structure. You may also consult the reference code for comparison if needed. Label the generated code as "Good" if it is free from such errors, or "Poor" if it contains any syntactic or structural mistakes.

Label: Good