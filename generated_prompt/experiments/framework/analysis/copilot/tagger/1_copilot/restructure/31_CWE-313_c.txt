Input_Code:
void good(const char *secretKey) {
  const char *password = "cleartext password";
  sqlite3_stmt *stmt;
  sqlite3 *credentialsDB;
  if (sqlite3_open("credentials.db", &credentialsDB) == SQLITE_OK) {
    #ToGenerate
    if (sqlite3_prepare_v2(credentialsDB, "INSERT INTO creds(password) VALUES(?)", -1, &stmt, NULL) == SQLITE_OK) {
      sqlite3_bind_text(stmt, 1, password, -1, SQLITE_TRANSIENT);
      sqlite3_step(stmt);
      sqlite3_finalize(stmt);
      sqlite3_close(credentialsDB);
    }
  }
}  
Reference_Code: 
    std::string setKeyString = std::string("PRAGMA key = '") + secretKey + "'";
    sqlite3_exec(credentialsDB, setKeyString.c_str(), NULL, NULL, NULL);
    sqlite3_exec(credentialsDB, "CREATE TABLE IF NOT EXISTS creds (password TEXT);", NULL, NULL, NULL);

Generated_Code: 
    sqlite3_exec(credentialsDB, "PRAGMA foreign_keys=OFF;", NULL, NULL, NULL);
    sqlite3_exec(credentialsDB, "CREATE TABLE IF NOT EXISTS creds(password TEXT);", NULL, NULL, NULL); 

1. Code Quality Tagger â€” Task Description

Task Description:
Your task is to evaluate the overall quality of the generated code. Examine whether the generated code contains any syntactic or structural errors, such as invalid syntax, incomplete statements, or improper code structure. You may also consult the reference code for comparison if needed. Label the generated code as "Good" if it is free from such errors, or "Poor" if it contains any syntactic or structural mistakes.

Label: Good